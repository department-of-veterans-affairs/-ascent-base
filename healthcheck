#!/bin/bash

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: $SCRIPT_NAME [OPTIONS]"
  echo
  echo "This script is used check the health of our "
  echo
  echo "Options:"
  echo
  echo -e "  --url\t\t\tService healthcheck URL. Defaults to https://127.0.0.1:8080/actuator/healthcheck."
  echo -e "  --clientCert\t\tClient SSL certificate. Defaults to /tmp/app.crt"
  echo -e "  --clientCertKey\tClient SSL key. Defaults to /tmp/app.key"
  echo -e "  --caCert\t\tCA certificate to validate service against. Defaults to /usr/local/share/ca-certificates/ascent/vault-ca.crt"
}

#################################################################################################
# UTILITY FUNCTIONS
#################################################################################################

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}


function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

#################################################################################################
# CORE FUNCTIONS
#################################################################################################

function run {
  local url="https://127.0.0.1:8080/actuator/health"
  local clientCert="/tmp/app.crt"
  local clientKey="/tmp/app.key"
  local caCert="/usr/local/share/ca-certificates/ascent/vault-ca.crt"
  local all_args=()

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --url)
        assert_not_empty "$key" "$2"
        url="$2"
        shift
        ;;
      --clientCert)
        assert_not_empty "$key" "$2"
        clientCert="$2"
        shift
        ;;
      --clientCertKey)
        assert_not_empty "$key" "$2"
        clientKey="$2"
        shift
        ;;
      --caCert)
        assert_not_empty "$key" "$2"
        caCert="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_is_installed "curl"
  local status=`curl -ksS --stderr /dev/null  --cert $clientCert --key $clientKey --cacert $caCert $url 2>&1 | head -1 | cut -d ' ' -f2`

  if [ "$status" != "200" ]; then
    curl -ksS --cert $clientCert --key $clientKey --cacert $caCert $url
    log_error "Healthcheck failed. Service returned HTTP Status Code: $status"
    exit 1
  fi
}

run "$@"
